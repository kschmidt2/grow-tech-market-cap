Highcharts.setOptions({lang:{thousandsSep:","}});let chartIdTechMarketCap=document.getElementById("chart-container-tech-market-cap");function drawHighcharts(){Highcharts.chart(chartIdTechMarketCap,{chart:{type:"treemap",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0},series:[{layoutAlgorithm:"squarified",layoutStartingDirection:"horizontal",dataLabels:{align:"center",allowOverlap:!0,crop:!1,overflow:"justify"},data:[{name:"Microsoft:<br>$1.37T",color:"#74c947",value:1374e9,sortIndex:1},{name:"Apple:<br>$1.34T",color:"#74c947",value:1342e9,sortIndex:2},{name:"Amazon:<br>$1.17T",color:"#74c947",value:1173e9,sortIndex:3},{name:"Alphabet:<br>$933.82B",color:"#74c947",value:93382e7,sortIndex:4},{name:"Facebook:<br>$595.46B",color:"#74c947",value:59546e7,sortIndex:5,dataLabels:{}},{name:"Other 495 companies:<br>$18.6T",color:"#cccfcf",value:1859566e7,sortIndex:6},{}]}],title:{text:null},plotOptions:{series:{enableMouseTracking:!1}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,itemMarginTop:-10},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{enabled:!1},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18}}}]}})}setTimeout(function(){if(""===chartIdTechMarketCap.innerHTML){let t=document.getElementsByClassName("chart-area-tech-market-cap");for(var e=0;e<t.length;e++)t[e].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
